/*
 * This source file was generated by the Gradle 'init' task
 */
package habitnu_assignment;

import java.io.IOException;
import java.time.Duration;
import java.util.Collections;
import java.util.HashSet;
import java.util.List;
import java.util.Set;
import java.util.logging.Level;
import java.util.regex.Pattern;

import org.openqa.selenium.By;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.chrome.ChromeDriver;
import org.openqa.selenium.chrome.ChromeDriverService;
import org.openqa.selenium.chrome.ChromeOptions;
import org.openqa.selenium.logging.LogType;
import org.openqa.selenium.logging.LoggingPreferences;
import org.openqa.selenium.support.ui.Select;
import org.testng.Assert;
import org.testng.annotations.AfterTest;
import org.testng.annotations.BeforeTest;
import org.testng.annotations.Test;
import org.testng.asserts.SoftAssert;

class AppTest {
    static ChromeDriver driver;

     @BeforeTest
    public void startBrowser()
    {
        System.setProperty("java.util.logging.config.file", "logging.properties");
        

        // NOT NEEDED FOR SELENIUM MANAGER
        // WebDriverManager.chromedriver().timeout(30).setup();

        ChromeOptions options = new ChromeOptions();
        LoggingPreferences logs = new LoggingPreferences();

        logs.enable(LogType.BROWSER, Level.ALL);
        logs.enable(LogType.DRIVER, Level.ALL);
        options.setCapability("goog:loggingPrefs", logs);
        options.addArguments("--remote-allow-origins=*");

        System.setProperty(ChromeDriverService.CHROME_DRIVER_LOG_PROPERTY, "build/chromedriver.log"); 

        driver = new ChromeDriver(options);
        
        driver.manage().window().maximize();
    }

    @AfterTest
    public void endTest()
    {
        driver.close();
        driver.quit();

    }

    @Test 
    public void testcase() throws IOException {
        driver.manage().timeouts().implicitlyWait(Duration.ofSeconds(5)); //Implicit wait of driver
        //Navigate to https://blazedemo.com/index.php
        driver.get("https://blazedemo.com/index.php"); //Launching url in the browser

        //Check if the title is displayed as ` Welcome to the Simple Travel Agency!`. This is the Home
        //Page of application
        String titleElement=driver.findElement(By.xpath("//div[@class='container']//h1")).getText(); //get the title text of the page
        Assert.assertEquals(titleElement, "Welcome to the Simple Travel Agency!", "Title does not matched"); //verifying the title of the page using assert
        
        //Click on ` destination of the week! The Beach!` hyperlink and see if a new tab opens in your
        //browser & the url has string `vacation`. Navigate back to home page tab.
        Wrappers.clickOnElement(driver, By.partialLinkText("The Beach!")); //Clicking on the element
        Set<String> WindowHandles = driver.getWindowHandles(); // get the windows/tabs unique string
        SoftAssert softAssert = new SoftAssert(); //Creating object for soft assert class
        softAssert.assertEquals(1, WindowHandles.size(), "A new window is opened"); //applying soft assert to verify the number of tabs opened
        Assert.assertTrue(driver.getCurrentUrl().contains("vacation")); //Verifying the text in url
        driver.navigate().back(); //Navigating back to the home page
        
        //Purchase a ticket:3.
        //Select `Mexico City` in departure city & `London` in destination city.
        String[] data=Wrappers.readData(1); //readData method call
        Select dropdown1=new Select(driver.findElement(By.name("fromPort"))); //Identifying the first drop down webelement using select class object ref
        dropdown1.selectByValue(data[0]); //Reading first column data
        Select dropdown2=new Select(driver.findElement(By.name("toPort"))); //Identifying the second drop down webelement using select class object ref
        dropdown2.selectByValue(data[1]); //Reading the second column data

        //Click ‘Find Flights’. Select the flight with lowest price by clicking `Choose the flight` & see if
        //we are navigated to purchase page (This should be dynamically handled and can work for any
        //inputs in Step 3.
        Wrappers.clickOnElement(driver, By.xpath("//input[@type='submit']")); //Click on find flights
        try{
            List<WebElement> priceElements=driver.findElements(By.xpath("//tr/td[6]")); //get all prices available
            Set<Integer> prices=new HashSet<>(); //To store the unique prices
            for(WebElement priceElement: priceElements){
                int price=Integer.parseInt(priceElement.getText().replaceAll("[^\\d]", "")); //Removing $ and . to check the prices
                prices.add(price); //Adding unique prices to set
            }
            Integer minValue=Collections.min(prices); //Identifying the minimum price
            int count=1; //Initialising count variable for row number
            for(Integer price: prices){ //For each price from set
                count++; //Incrementing count for each row iteration
                if(minValue.equals(price)){ //Comparing min value with each price to get the least price row
                    Wrappers.clickOnElement(driver, By.xpath("//tr["+count+"]/td[1]")); //Identifying & clicking on the button in least price row
                    break; //breaking the loop
                }
            }
            Assert.assertTrue(driver.getCurrentUrl().contains("purchase")); //Asserting navigation to purchase page
        }catch(Exception e){
            System.out.println("Exception! "+e.getMessage());
        }

        //Check if a field named ‘Total Cost’ is available with price available in xxx.xx format. Click on
        //‘Purchase flight’ button
        Assert.assertTrue(driver.findElement(By.xpath("//p[contains(text(),'Total Cost')]")).isDisplayed()); //Asserting field named ‘Total Cost’ is available or not?
        WebElement webElement= driver.findElement(By.xpath("//p[contains(text(),'Total Cost')]//em")); //Finding total cost price value
        String decimalRegex = "\\d*\\.\\d+$"; //Defining a regex which starts with any number of digits followed by . decimal point and One or more digits after the decimal point.
        Pattern pattern=Pattern.compile(decimalRegex); //Using pattern class compiling the defined regex
        Assert.assertTrue(pattern.matcher(webElement.getText()).matches()); //Asserting the pattern
        Wrappers.clickOnElement(driver, By.xpath("//input[@value='Purchase Flight']")); //Clicking on purchase flight button

        //Check if the user is navigated to Purchase Confirmation page & store the `Id’ in the console
        //or test report for future reference.
        Assert.assertTrue(driver.getCurrentUrl().contains("confirmation")); //Verifying if the user is navigated to Purchase Confirmation page
        String purchaseID=driver.findElement(By.xpath("//tr[1]//td[2]")).getText(); //get the id
        System.out.println("Purchase id is: "+purchaseID); //Print the id

    }
}
